# import email
# from tabnanny import verbose
from datetime import datetime
from itertools import product
from django.contrib.auth.models import AbstractUser, AbstractBaseUser, PermissionsMixin, BaseUserManager
from django.db import models
# from django.contrib.auth.models import User
from django.db.models.signals import post_save
from django.dispatch import receiver
from rest_framework.authtoken.models import Token
from django.conf import settings
from django_rest_passwordreset.signals import reset_password_token_created
from django.urls import reverse
from django.core.mail import send_mail
from .paystack import PayStack
# from digital_billing_app.api.utils import sendResetPasswordEmail

# Create your models here.


# class CustomUser(AbstractUser):
#     email = models.EmailField(unique=True)

#     USERNAME_FIELD = "email"
#     REQUIRED_FIELDS = ("first_name",)

class CustomUserManager(BaseUserManager):
    def _create_user(self, email, password, name, mobile_no, **extra_fields):
        if not email:
            raise ValueError("Email most be provided")
        if not password:
            raise ValueError("Password most be provided")

        user = self.model(
            email = self.normalize_email(email),
            name = name,
            mobile_no = mobile_no,
            **extra_fields
        )

        user.set_password(password)
        user.save(using=self._db)
        return user 

    def create_user(self, email, password, name, mobile_no, **extra_fields):
        extra_fields.setdefault("is_staff", True)
        extra_fields.setdefault("is_active", True)
        extra_fields.setdefault("is_superuser", False)
        return self._create_user(email, password, name, mobile_no, **extra_fields)

    def create_superuser(self, email, password, name, mobile_no, **extra_fields):
        extra_fields.setdefault("is_staff", True)
        extra_fields.setdefault("is_active", True)
        extra_fields.setdefault("is_superuser", True)

        return self._create_user(email, password, name, mobile_no, **extra_fields)


class CustomUser(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(unique=True)
    name = models.CharField(max_length=150, null=True, blank=True)
    mobile_no = models.CharField(max_length=11, null=False, blank=False, unique=True)
    security_pin = models.CharField(max_length=4, null=True, blank=True)
    otpConfirm = models.BooleanField(default=False, blank=False)
    date_join = models.DateTimeField(auto_now_add=True)
    discoverUs = models.CharField(max_length=200, blank=True, null=True)
    image = models.ImageField(null=True, blank=True)
    is_balance_visible = models.BooleanField(default=True, blank=False)
    data_default_no = models.CharField(max_length=200, blank=True, null=True)
    airtime_default_no = models.CharField(max_length=200, blank=True, null=True)
    cable_iuc_default = models.CharField(max_length=200, blank=True, null=True)
    internet_default_no = models.CharField(max_length=200, blank=True, null=True)
    meter_default_no = models.CharField(max_length=200, blank=True, null=True)
    authorize_all_trans = models.BooleanField(default=True, blank=False)
    is_lock_inactive_mode = models.BooleanField(default=True, blank=False)
    unique_referral_code = models.CharField(max_length=200, blank=True, null=True) # UR UNIQUE REFERRAL CODE GENERATED BY SYSTEM
    ur_referred_code = models.CharField(max_length=200, blank=True, null=True) # CODE OF THE PERSON THAT REFERRED YOU
    is_referral_bonus_sent = models.BooleanField(default=False)
    is_staff = models.BooleanField(default=True)
    is_active = models.BooleanField(default=True)
    is_superuser = models.BooleanField(default=False)


    objects = CustomUserManager()

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = ["name", "mobile_no"]

    @property
    def imageURL(self):
        try:
            url = self.image.url
        except:
            url = ''
        return url

    @property
    def get_balanceAmt(self):
        if self.credit > 0:
            new_bal = round(self.credit - self.debit) 
        else:
            new_price = self.price
        return new_bal



@receiver(reset_password_token_created)
def password_reset_token_created(sender, instance, reset_password_token, *args, **kwargs):
    # pass
    # THIS FUNCTION WILL SEND RESET USER PASSWORD BY SENDING A TOKEN
    # sendResetPasswordEmail(reset_password_token)

    email_plaintext_message = "{}?token= {}".format(reverse('password_reset:reset-password-request'), reset_password_token.key)
    print(email_plaintext_message)
    # send_mail(
    #     # title:
    #     "Password Reset for {title}".format(title="Some website title"),
    #     # message:
    #     email_plaintext_message,
    #     # from:
    #     "noreply@somehost.local",
    #     # to:
    #     [reset_password_token.user.email]
    # )


    # forgot_password_token = "{}".format(reset_password_token.key)
    # greetings = "Hi {}!".format(reset_password_token.user.name)

    # email_html_content = "Hi Joe, Please use this token to reset your password. {}".format(forgot_password_token)

    # print(email_html_content)



@receiver(post_save, sender=settings.AUTH_USER_MODEL)
def create_auth_token(sender, instance=None, created=False, **kwargs):
    if created:
        Token.objects.create(user=instance)


class DataSubscription(models.Model):
    name = models.CharField(max_length=200, blank=True, null=True)
    code = models.CharField(max_length=200, null=True, blank=True)
    amount_mb = models.CharField(max_length=200, blank=True, null=True)
    price = models.DecimalField(max_digits=9, decimal_places=2, default=0)
    period = models.CharField(max_length=200, null=True, blank=True)
    discount = models.DecimalField(max_digits=4, decimal_places=2, default=0)
    active = models.BooleanField(default=True, null=True, blank=False)
    created_date = models.DateTimeField(auto_now_add=True)
    updated_date = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name


class TransactionLog(models.Model):
    customer = models.ForeignKey(CustomUser, on_delete=models.CASCADE, blank=True, null=True)
    subscription = models.ForeignKey(DataSubscription, on_delete=models.SET_NULL, blank=True, null=True)
    transaction_no = models.CharField(max_length=200, null=True, blank=True)
    service_code = models.CharField(max_length=200, null=True, blank=True)
    service_provided = models.CharField(max_length=200, null=True, blank=True)
    service_fee = models.DecimalField(max_digits=9, decimal_places=2, default=0)
    amount = models.DecimalField(max_digits=9, decimal_places=2, default=0)
    data_amt = models.CharField(max_length=200, null=True, blank=True)
    percent_discount = models.CharField(max_length=200, null=True, blank=True)
    amt_after_discount = models.DecimalField(max_digits=9, decimal_places=2, default=0)
    status = models.BooleanField(default=False, null=True, blank=False)
    created_date_time = models.DateTimeField(auto_now_add=True)
    created_date = models.DateField(auto_now_add=True)

    def __str__(self):
        return self.transaction_no



class AccountHistory(models.Model):
    customer = models.ForeignKey(CustomUser, on_delete=models.CASCADE, blank=True, null=True)
    transaction_log = models.ForeignKey(TransactionLog, on_delete=models.SET_NULL, blank=True, null=True)
    transaction_date = models.DateField(auto_now_add=True)
    description = models.CharField(max_length=200, null=True, blank=True)
    credit = models.FloatField(default=0, max_length=15)
    debit = models.FloatField(default=0, max_length=15)
    closing_bal = models.FloatField(default=0, max_length=15)
    status = models.BooleanField(default=False, null=True, blank=False)
    payVerify = models.BooleanField(default=False, null=True, blank=False)
    payMethod = models.CharField(max_length=200, null=True, blank=True)
    bank = models.CharField(max_length=10, null=True, blank=True)
    payCard = models.CharField(max_length=200, null=True, blank=True)
    refPay = models.CharField(max_length=200, null=True, blank=True)
    created_date_time = models.DateTimeField(auto_now_add=True)

    def __str__ (self):
        return self.description

    def getClosingBal(self):
        latest_bal = 0
        cust = AccountHistory.objects.filter(customer_id=self.customer_id).order_by('-created_date_time')
        for cus in cust:
            latest_bal = cus.closing_bal
            break
        return latest_bal

    def save(self, *args, **kwargs):
        self.closing_bal = (self.credit + self.getClosingBal()) - self.debit
        # self.transaction_date = datetime.now().strftime("%Y-%m-%d")
        self.status = True
        super(AccountHistory, self).save(*args, **kwargs)

    
    def verify_payment(self):
        paystack = PayStack()
        status, result = paystack.verify_payment(self.refPay)
        # print('Verification from model start here....')
        # print(status)
        # print(result)
        # print(result['amount'] / 100)
        # if status:
        #     print('PASSED 1')
        #     if float (result['amount'] / 100) == float (2000):
                
        #         self.payVerify = True
        #     # self.credit = credit
        #     self.payMethod = result['channel']
        #     self.description = result['receipt_number']
            
        #     # self.bank = result['bank']
        #     # print(self.bank)

        #     # self.payCard = result['card_type']
        #     # print(self.payCard)
            
        #     self.save()
        # if self.payVerify:
        #     return status, result
        return status, result


class CompanyInfo(models.Model):
    business_name = models.CharField(max_length=200, default='', unique=True)
    street_address1 = models.CharField(max_length=200, default='', blank=True)
    city = models.CharField(max_length=200, default='', blank=True)
    state = models.CharField(max_length=200, default='', blank=True)
    postal = models.CharField(max_length=200, default='', blank=True)
    country = models.CharField(max_length=200, default='', blank=True)
    phone = models.CharField(max_length=15, default='', blank=True)
    phone2 = models.CharField(max_length=15, default='', blank=True)
    email = models.EmailField(unique=True)
    company_logo = models.ImageField(null=True, blank=True)
    bonus_percent = models.FloatField(default=0, max_length=3)
    user_agreement = models.TextField(null=True, blank=True)
    created_date_time = models.DateTimeField(auto_now_add=True)
    updated_date = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.business_name

    @property
    def imageURL(self):
        try:
            url = self.company_logo.url
        except:
            url = ''
        return url


class Referral(models.Model):
    referral_customer = models.ForeignKey(CustomUser, on_delete=models.CASCADE, blank=True, null=True) # THE ID OF THE EXISTING CUSTOMER. THIS IS THE ONE THAT REFERRED A NEW CUSTOMER
    referred_cus = models.PositiveIntegerField(unique=True, blank=True, null=True) # THE ID OF THE NEWLY REGISTERED CUSTOMER
    referred_cus_initial_deposit = models.FloatField(default=0, max_length=15)
    is_payment_verified = models.BooleanField(default=False)
    percentage_rate = models.FloatField(default=0, max_length=5)
    bonus_amt = models.FloatField(default=0, max_length=15)
    referral_process = models.CharField(max_length=200, default='', blank=True)
    is_referral_process_complete = models.BooleanField(default=False)
    created_date_time = models.DateTimeField(auto_now_add=True)
   
    def __str__(self):
        return str (self.bonus_amt)
